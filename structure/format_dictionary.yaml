# format_dictionary.yaml - Emulation plan YAML dictionary

- emulation_plan_details:
    id: UUID for the Procedure (e.g. b5192070-dff1-4134-bf66-c6b87c7498af)
    adversary_name: Adversary
    adversary_description: Adversary Description
    attack_version: Version of ATT&CK in which the plan was developed
    format_version: YAML format version

# All possible fields for a single TTP.
# Any amount of TTPs may be included in this format within a single emulation plan.
# (Variable): Means that the name of the field is variable

- id: UUID for the Procedure (e.g. e44a39ce-0651-3ddd-df05-f83aa2ffd657)
  name: Unique Name of the TTP
  description: Description of the Procedure
  tactic: ATT&CK Tactic Name
  technique: #(Empty)
    attack_id: "ATT&CK Technique ID"
    name: "ATT&CK Technique Name"
  cti_source: Reference (link, description, etc.) to a specific CTI data source such as a threat report or file
  procedure_group: A unique name for a group of Procedures
  procedure_step: A unique step ID for this TTP. Can be used to create sequences of TTPs.
  platforms: #(Empty)
    platform_name: #(Empty/Variable e.g. windows, linux, darwin)
      executor_name: #(Empty/Variable e.g. cmd, psh, pwsh, sh)
        command: |
          The command or data to provide to that executor
        payloads:
        - The name of a file to use as a payload for the executor

  # Multiple input arguments may be specified and referenced elsewhere using the format #{argument_name}
  input_arguments: #(Empty, Optional)
    argument_name: #(Empty, Variable e.g. payload_url)
      description: Description of the argument
      type: (Path | String | URL)
      default: Default value of the argument. Placeholder or possible value derived from CTI.

  # Required when a payload is used for the procedure
  dependency_executor_name: #(Optional) Name of the executor used to execute the prerequisite command
  dependencies: #(Empty)
  - description: Description of the dependency command
    prereq_command: A validation command to execute as a prerequisite to this Procedure that checks that all dependencies are met
    get_prereq_command: A command that ensures all payloads and arguments are available before executing the validation command

  # Additional execution methods for the Procedure may be provided through executors
  # Multiple executors may be specified
  executors:
    - name: Name of the executor
      elevation_required: (Optional; true | false)
      command: |
        The command to execute the Procedure using this executor
      cleanup_command: |
        (Optional) Command to run using this executor after the Procedure to cleanup
